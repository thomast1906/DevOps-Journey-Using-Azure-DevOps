name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  batch: true 
  branches:
    include:
      - main

# Don't run against PRs
pr: none

variables:
  - name: backendServiceArm
    value: 'azure-devops-journey-oct2024'
  - name: backendAzureRmResourceGroupName
    value: 'devops-journey-rg-oct2024'
  - name: backendAzureRmStorageAccountName
    value: 'devopsjourneyoct2024'
  - name: backendAzureRmContainerName
    value: 'tfstate'
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: environment
    value: 'production'
  - name: terraform_version
    value: '1.9.6'
  - name: repository
    value: 'repository'
  - name: dockerfile
    value: '$(Build.SourcesDirectory)/app/Dockerfile'
  - name: containerRegistry
    value: 'devopsjourneyoct2024acr.azurecr.io'
  - group: devopsjourney

stages :          
  - stage: plan
    jobs:
      - job: terraform_plan_production
        steps:
        - task: TerraformInstaller@1
          displayName: 'install'
          inputs:
            terraformVersion: ${{ variables.terraform_version}}
        - task: TerraformTaskV4@4
          displayName: 'init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: ${{ variables.backendServiceArm }}
            backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
            backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
            backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
            backendAzureRmKey: ${{ variables.backendAzureRmKey }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        - task: TerraformTaskV4@4
          displayName: 'plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '-input=false -var-file="../vars/${{ variables.environment }}.tfvars"'
            environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

  - stage: apply
    dependsOn: [plan]
    condition: succeeded('plan')
    jobs:
      - job: terraform_apply_production
        steps:
        - task: TerraformInstaller@1
          displayName: 'install'
          inputs:
            terraformVersion: ${{ variables.terraform_version}}
        - task: TerraformTaskV4@4
          displayName: 'init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: ${{ variables.backendServiceArm }}
            backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
            backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
            backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
            backendAzureRmKey: ${{ variables.backendAzureRmKey }} 
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        - task: TerraformTaskV4@4
          displayName: 'apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: '-input=false -auto-approve -var-file="../vars/${{ variables.environment }}.tfvars"'
            environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

  - stage: Build
    # dependsOn: [apply]
    displayName: Build and push image
    jobs:  
    - job: Build
      displayName: Build job
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: ${{ variables.repository }}
          dockerfile: ${{ variables.dockerfile }}
          containerRegistry: ${{ variables.containerRegistry }}
          tags: latest

  - stage: aks_deploy
    dependsOn: [Build]
    displayName: Deploy app to AKS
    jobs:  
    - job: Build
      displayName: Build job
      steps:
      - task: AzureCLI@2
        displayName: 'Configure AKS Cluster'
        inputs:
          azureSubscription: ${{ variables.backendServiceArm }}
          scriptType: bash
          scriptLocation: inlineScript
          addSpnToEnvironment: true
          inlineScript: |
            #!/usr/bin/env bash
            set -x

            RESOURCE_GROUP="devopsjourneyoct2024-rg"
            AKS_NAME="devopsjourneyoct2024"
            helm_resource_namespace="azure-alb-system"
            VNET_NAME="devopsjourneyoct2024-vnet"
            ALB_SUBNET_NAME="appgw"
            ALB_CONTROLLER_VERSION="1.0.0"
            ALB_RESOURCE_NAME='devopsjourneyoct2024-alb'
            ALB_FRONTEND_NAME='alb-frontend'
            APP_NAMESPACE='thomasthorntoncloud'

            # Get AKS Credentials
            az aks get-credentials -g $RESOURCE_GROUP -n $AKS_NAME --admin

            #create namespace
            kubectl create namespace $helm_resource_namespace

            #Create App Namespace
            kubectl create namespace $APP_NAMESPACE

            helm install alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller --namespace $helm_resource_namespace --version $ALB_CONTROLLER_VERSION --set albController.namespace=$helm_resource_namespace --set albController.podIdentity.clientID=$(az identity show -g $RESOURCE_GROUP -n azure-alb-identity --query clientId -o tsv)

            RESOURCE_ID=$(az network alb show --resource-group $RESOURCE_GROUP --name $ALB_RESOURCE_NAME --query id -o tsv)

            # Create a Gateway
            kubectl apply -f - <<EOF
            apiVersion: gateway.networking.k8s.io/v1
            kind: Gateway
            metadata:
              name: gateway-01
              namespace: thomasthorntoncloud
              annotations:
                alb.networking.azure.io/alb-id: $RESOURCE_ID
            spec:
              gatewayClassName: azure-alb-external
              listeners:
              - name: http
                port: 80
                protocol: HTTP
                allowedRoutes:
                  namespaces:
                    from: Same
              addresses:
              - type: alb.networking.azure.io/alb-frontend
                value: $ALB_FRONTEND_NAME
            EOF

            #Create HTTP Route
            kubectl apply -f - <<EOF
            apiVersion: gateway.networking.k8s.io/v1
            kind: HTTPRoute
            metadata:
              name: traffic-thomasthorntoncloud
              namespace: thomasthorntoncloud
            spec:
              parentRefs:
              - name: gateway-01
              rules:
              - backendRefs:
                - name: thomasthorntoncloud
                  port: 80
            EOF

            # Create secret for app insights
            kubectl -n thomasthorntoncloud create secret generic aikey --from-literal=aisecret=$(AIKEY)

            # Apply app
            kubectl apply -f pipelines/scripts/app.yaml 